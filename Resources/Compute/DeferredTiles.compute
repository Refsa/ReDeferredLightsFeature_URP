#pragma kernel ComputeLightTiles
#pragma kernel ComputeTileFrustums

#include "Common.hlsl"

cbuffer ThreadData
{
    float2 _NumThreads;
    float2 _NumThreadGroups;
};

RWStructuredBuffer<Frustum> _Frustum;

RWStructuredBuffer<uint> _LightIndexData;
RWStructuredBuffer<uint> _LightIndexCounter;
RWTexture2D<uint2> _TileData;

Texture2D<float4> _DepthNormalsTexture;
Texture2D<float4> _WorldPositionsTexture;

// #########################
// ### COMPUTE TILE DATA ###
// #########################

groupshared uint LightCount;
groupshared uint LightIndexStartOffset;
groupshared uint LightList[1024];
groupshared float3 PosDir;
groupshared float Dist;
groupshared float Dist2;
groupshared float DistS;
groupshared uint MaxDist;
groupshared uint MinDist;
// groupshared Box TileBox;
// groupshared Sphere TileSphere;

static const float MaxCheck = 300 * 300;
inline void AppendLight(uint lightIndex)
{
    uint index;
    InterlockedAdd(LightCount, 1, index);
    if (index < 1024)
    {
        LightList[index] = lightIndex;
    }
}

[numthreads(BLOCK_SIZE,BLOCK_SIZE,1)]
void ComputeLightTiles(
    uint3 id : SV_DISPATCHTHREADID, 
    uint groupIndex : SV_GROUPINDEX, 
    uint3 groupID: SV_GROUPID, 
    uint3 groupThreadID : SV_GROUPTHREADID)
{
    uint i = 0;

    int2 texCoord = id.xy;
    float3 wpos = _WorldPositionsTexture.Load(int3(texCoord, 0));
    float dist = distance(_CameraPos, wpos);
    uint idist = asuint(dist);

    if (groupIndex == 0)
    {
        LightIndexStartOffset = 0;
        LightCount = 0;
        PosDir = normalize(wpos - _CameraPos);
        Dist = dist;
        Dist2 = dist * dist;
        DistS = Dist2 * 0.025;

        MaxDist = 0;
        MinDist = 0xffffffff;
    }

    GroupMemoryBarrierWithGroupSync();

    InterlockedMax(MaxDist, idist);
    InterlockedMin(MinDist, idist);

    GroupMemoryBarrierWithGroupSync();

    float maxDist = asfloat(MaxDist);
    float minDist = asfloat(MinDist);

    for (i = groupIndex; i < _LightCount; i += BLOCK_SIZE * BLOCK_SIZE)
    {
        DFLightData ld = _LightData[i];

        float3 sDir = (ld.Position - _CameraPos);
        // float sDepth = dot(sDir, sDir);
        float sDepth = length(sDir);
        sDir = normalize(sDir);
        float sDepth2 = sDepth * sDepth;
        float twobc = 2 * sDepth * Dist;
        float c = sDepth2 + Dist2 - twobc * dot(PosDir, sDir);

        // if (c < min(max(DistS, ld.RangeSqr), MaxCheck))
        if (c < max(DistS, ld.RangeSqr))
        {
            AppendLight(i);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (groupIndex == 0)
    {
        InterlockedAdd(_LightIndexCounter[0], LightCount, LightIndexStartOffset);
        _TileData[groupID.xy] = uint2(LightIndexStartOffset, LightCount * (length(wpos) > 0));
    }

    GroupMemoryBarrierWithGroupSync();

    for (i = groupIndex; i < LightCount; i+= BLOCK_SIZE * BLOCK_SIZE)
    {
        _LightIndexData[LightIndexStartOffset + i] = LightList[i];
    }
} 


RWStructuredBuffer<Box> _TileBoxes;
[numthreads(BLOCK_SIZE, BLOCK_SIZE, 1)]
void ComputeTileBoxes(uint3 id : SV_DISPATCHTHREADID)
{

}


// ###########################
// ### FRUSTUM CALCULATION ###
// ###########################

inline Plane ComputePlane( float3 p0, float3 p1, float3 p2 )
{
    Plane plane;
 
    float3 v0 = p1 - p0;
    float3 v2 = p2 - p0;
 
    plane.Normal = normalize( cross( v0, v2 ) );
 
    // Compute the distance to the origin using p0.
    plane.Distance = dot( plane.Normal, p0 );
 
    return plane;
}

[numthreads(BLOCK_SIZE,BLOCK_SIZE,1)]
void ComputeTileFrustums(uint3 id : SV_DISPATCHTHREADID)
{
    const float3 eyePos = float3(0,0,0);

    float4 screenSpace[4];
    screenSpace[0] = float4(id.xy * BLOCK_SIZE, -1.0, 1.0);
    screenSpace[1] = float4(float2(id.x + 1.0, id.y) * BLOCK_SIZE, -1.0, 1.0);
    screenSpace[2] = float4(float2(id.x, id.y + 1.0) * BLOCK_SIZE, -1.0, 1.0);
    screenSpace[3] = float4(float2(id.x + 1.0, id.y + 1.0) * BLOCK_SIZE, -1.0, 1.0);

    float3 viewSpace[4];
    [unroll]
    for (int i = 0; i < 4; i++)
    {
        viewSpace[i] = ScreenToView(screenSpace[i]).xyz;
    }

    Frustum frustum;
    frustum.planes[0] = ComputePlane(eyePos, viewSpace[2], viewSpace[0]);
    frustum.planes[1] = ComputePlane(eyePos, viewSpace[1], viewSpace[3]);
    frustum.planes[2] = ComputePlane(eyePos, viewSpace[0], viewSpace[1]);
    frustum.planes[3] = ComputePlane(eyePos, viewSpace[3], viewSpace[2]);

    if ( id.x < uint(_NumThreads.x) && id.y < uint(_NumThreads.y) )
    {
        uint index = id.x + (id.y * _NumThreads.x);
        _Frustum[index] = frustum;
    }
}