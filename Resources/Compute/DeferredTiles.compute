#pragma kernel ComputeLightTiles
#pragma kernel ComputeTileFrustums

#include "Common.hlsl"

cbuffer ThreadData
{
    float2 _NumThreads;
    float2 _NumThreadGroups;
};

RWStructuredBuffer<Frustum> _Frustum;

RWStructuredBuffer<uint> _LightIndexData;
RWStructuredBuffer<uint> _LightIndexCounter;
RWTexture2D<uint2> _TileData;

Texture2D<float4> _DepthNormalsTexture;
Texture2D<float4> _WorldPositionsTexture;
Texture2D _DepthTexture;

// #########################
// ### COMPUTE TILE DATA ###
// #########################
StructuredBuffer<Frustum> _Frustum_static;

groupshared uint LightCount;
groupshared uint LightIndexStartOffset;
groupshared uint LightList[1024];
groupshared uint MinDepth;
groupshared uint MaxDepth;
groupshared Frustum GroupFrustum;

inline void AppendLight(uint lightIndex)
{
    uint index;
    InterlockedAdd(LightCount, 1, index);
    if (index < 1024)
    {
        LightList[index] = lightIndex;
    }
}

[numthreads(BLOCK_SIZE,BLOCK_SIZE,1)]
void ComputeLightTiles(
    uint3 id : SV_DISPATCHTHREADID, 
    uint groupIndex : SV_GROUPINDEX, 
    uint3 groupID: SV_GROUPID, 
    uint3 groupThreadID : SV_GROUPTHREADID)
{
    uint i = 0;
    int2 texCoord = id.xy;
    float depth = _DepthTexture.Load(uint3(texCoord, 0)).r;
    
    uint idepth = asuint(depth);

    if (groupIndex == 0)
    {
        LightIndexStartOffset = 0;
        LightCount = 0;

        MinDepth = 0xffffffff;
        MaxDepth = 0;

        GroupFrustum = _Frustum_static[groupID.x + (groupID.y * _NumThreads.x)];
    }

    GroupMemoryBarrierWithGroupSync();

    InterlockedMin(MinDepth, idepth);
    InterlockedMax(MaxDepth, idepth);

    GroupMemoryBarrierWithGroupSync();

    float minDepth = asfloat(MinDepth);
    float maxDepth = asfloat(MaxDepth);

    float minDepthVS = NDCToView(float4(0, 0, minDepth, minDepth)).z;
    float maxDepthVS = NDCToView(float4(0, 0, maxDepth, _ProjParams.z)).z;

    for (i = groupIndex; i < _LightCount; i += BLOCK_SIZE * BLOCK_SIZE)
    {
        DFLightData ld = _LightData[i];
        
        float3 lightViewPos = WorldToViewPos(ld.Position);
        Sphere sphere = {lightViewPos, ld.Range};
        
        if (SphereInsideFrustum(sphere, GroupFrustum, minDepthVS, maxDepthVS))
        {
            AppendLight(i);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    if (groupIndex == 0)
    {
        InterlockedAdd(_LightIndexCounter[0], LightCount, LightIndexStartOffset);
        _TileData[groupID.xy] = uint2(LightIndexStartOffset, LightCount);
    }

    GroupMemoryBarrierWithGroupSync();

    for (i = groupIndex; i < LightCount; i += BLOCK_SIZE * BLOCK_SIZE)
    {
        _LightIndexData[LightIndexStartOffset + i] = LightList[i];
    }
} 

// ###########################
// ### FRUSTUM CALCULATION ###
// ###########################

inline Plane ComputePlane( float3 p0, float3 p1, float3 p2 )
{
    Plane plane;
 
    float3 v0 = p1 - p0;
    float3 v2 = p2 - p0;
 
    plane.Normal = -normalize( cross( v0, v2 ) );
    plane.Distance = dot( p0, plane.Normal );
 
    return plane;
}

[numthreads(BLOCK_SIZE,BLOCK_SIZE,1)]
void ComputeTileFrustums(uint3 id : SV_DISPATCHTHREADID)
{
    const float3 eyePos = float3(0,0,0);
    const float2 resrcp = rcp(_InputSize);
    // const float2 resrcp = _InputSize;

    float2 screenSpace[4];
    screenSpace[0] = id.xy * BLOCK_SIZE * resrcp.xy * float2(2, 2) - float2(1, 1);
    screenSpace[1] = (id.xy + float2(1, 0)) * BLOCK_SIZE * resrcp.xy * float2(2, 2) - float2(1, 1);
    screenSpace[2] = (id.xy + float2(0, 1)) * BLOCK_SIZE * resrcp.xy * float2(2, 2) - float2(1, 1);
    screenSpace[3] = (id.xy + float2(1, 1)) * BLOCK_SIZE * resrcp.xy * float2(2, 2) - float2(1, 1);

    float3 viewSpace[4];
    [unroll]
    for (int i = 0; i < 4; i++)
    {
        viewSpace[i] = NDCToView(float4(screenSpace[i], 0, 1)).xyz;
    }

    Frustum frustum;
    frustum.planes[0] = ComputePlane(eyePos, viewSpace[2], viewSpace[0]);
    frustum.planes[1] = ComputePlane(eyePos, viewSpace[0], viewSpace[1]);
    frustum.planes[2] = ComputePlane(eyePos, viewSpace[1], viewSpace[3]);
    frustum.planes[3] = ComputePlane(eyePos, viewSpace[3], viewSpace[2]);

    if ( id.x < uint(_NumThreads.x) && id.y < uint(_NumThreads.y) )
    {
        uint index = id.x + (id.y * _NumThreads.x);
        _Frustum[index] = frustum;
    }
}