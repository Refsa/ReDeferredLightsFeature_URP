// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpsampleOutput
#pragma kernel ComputeLights

// #include "UnityCG.cginc"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl" 

float _RenderScale;

// GBuffers
Texture2D<float4> _AlbedoTexture;
Texture2D<float4> _SpecularTexture;
Texture2D<float4> _DepthNormalsTexture;
Texture2D<float4> _WorldPositionsTexture;

// Lights Texture
float2 _InputSize;
RWTexture2D<float4> _DeferredLightsTexture;

// Output Texture
float2 _OutputSize;
RWTexture2D<float4> _DeferredOutputTexture;

[numthreads(32,32,1)]
void UpsampleOutput (uint3 id : SV_DispatchThreadID)
{
    const uint2 diff = ceil(_OutputSize * rcp(_InputSize));

    float4 light = _DeferredLightsTexture[id.xy];
    float3 lightStrength = light.rgb * light.a;

    uint2 samplePos = 0;
    float4 colSample = 0, albedoSample = 0;

    for (uint i = 0; i < diff.x; i++)
    {
        for (uint j = 0; j < diff.y; j++)
        {
            samplePos = id.xy * rcp(_RenderScale) + uint2(i, j);

            // colSample = _AlbedoTexture[samplePos];
            colSample = _DeferredOutputTexture[samplePos];

            colSample.rgb += lightStrength;

            _DeferredOutputTexture[samplePos] = colSample;
        }
    }
}

// ###########################
// #### LIGHTS START HERE ####
// ###########################

struct DFLightData
{
    float3 Position;
    float3 Color;
    float Intensity;
    float Range;
};

StructuredBuffer<DFLightData> _LightData;
uint _LightCount;
float4x4 _MVP;
float4x4 MATRIX_IV;
float3 _CameraPos;

float3 DecodeNormal(float4 enc)
{
    float kScale = 1.7777;
    float3 nn = enc.xyz*float3(2*kScale,2*kScale,0) + float3(-kScale,-kScale,1);
    float g = 2.0 / dot(nn.xyz,nn.xyz);
    float3 n;
    n.xy = g*nn.xy;
    n.z = g-1;
    return n;
}

// inline float Luminance(float3 linearRgb)
// {
//     return dot(linearRgb, float3(0.2126729, 0.7151522, 0.0721750));
// }

[numthreads(32,18,1)]
void ComputeLights (uint3 id : SV_DispatchThreadID)
{
    float4 depthNormal = _DepthNormalsTexture[id.xy];
    float4 specular = _SpecularTexture[id.xy];
    float3 albedo = _AlbedoTexture[id.xy];
    float3 normal = DecodeNormal(depthNormal);
    normal = mul(MATRIX_IV, float4(normal, 0));
    float3 worldPos = _WorldPositionsTexture[id.xy].xyz;

    const uint validPos = (dot(worldPos, worldPos) != 0);
    const uint maxLights = _LightCount * validPos;

    float4 accLight = 0, col = 0;
    float3 ldir = 0, vdir = 0;
    float atten = 0, intensity = 0, dist = 0;
    DFLightData ld = (DFLightData)0;

    // [loop]
    // for (uint i = 0; i < maxLights; i++)
    // {
    //     ld = _LightData[i];
         
    //     ldir = (worldPos - ld.Position);
    //     dist = dot(ldir, ldir);

    //     [branch] if (dist > ld.Range) continue;

    //     atten = smoothstep(0, ld.Range, ld.Range - dist);
    //     intensity = rcp(Luminance(ld.Color * ld.Intensity) + 1) * atten;

    //     col.rgb = ld.Color * intensity;
    //     col.a = intensity;

    //     accLight += col;
    // }
    
    vdir = normalize(_CameraPos - worldPos);

    [loop]
    for (uint i = 0; i < maxLights; i++)
    {
        ld = _LightData[i];
         
        ldir = (ld.Position - worldPos);
        dist = dot(ldir, ldir);

        [branch] if (dist > ld.Range) continue;

        ldir = normalize(ldir);

        float3 halfVec = normalize(vdir + ldir);
        half NdotH = saturate(dot(normal, halfVec));
        half modifier = pow(NdotH, specular.w);
        half3 specRef = specular.rgb * modifier;

        atten = smoothstep(0, ld.Range, ld.Range - dist);
        intensity = rcp(Luminance(ld.Color * ld.Intensity) + 1) * atten;

        col.rgb = albedo + specRef * ld.Color;

        col.a = sqrt(0.01 * atten * rcp(ld.Intensity));

        accLight += col;
    }

    _DeferredLightsTexture[id.xy] = accLight;
} 