// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpsampleOutput
#pragma kernel ComputeLights
#pragma kernel ComputePixelData

// #include "UnityCG.cginc"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl" 
#include "Common.hlsl"

// GBuffers
Texture2D<float4> _AlbedoTexture;
Texture2D<float4> _SpecularTexture;
Texture2D<float4> _DepthNormalsTexture;
Texture2D<float4> _WorldPositionsTexture;

// Lights Texture
RWTexture2D<float4> _DeferredLightsTexture;

// Output Texture
RWTexture2D<float4> _DeferredOutputTexture;

[numthreads(32,32,1)]
void UpsampleOutput (uint3 id : SV_DispatchThreadID)
{
    const uint2 diff = ceil(_OutputSize * rcp(_InputSize));

    float4 light = _DeferredLightsTexture[id.xy];
    float3 lightStrength = light.rgb;

    uint2 samplePos = 0;
    float4 colSample = 0, albedoSample = 0;

    for (uint i = 0; i < diff.x; i++)
    {
        for (uint j = 0; j < diff.y; j++)
        {
            samplePos = id.xy * rcp(_RenderScale) + uint2(i, j);

            // colSample = _AlbedoTexture[samplePos];
            colSample = _DeferredOutputTexture[samplePos];

            colSample.rgb += lightStrength;

            _DeferredOutputTexture[samplePos] = colSample;
        }
    }
}

// ###########################
// #### LIGHTS START HERE ####
// ###########################
#define HALF_MIN 6.103515625e-5  // 2^-14, the same value for 10, 11 and 16-bit: https://www.khronos.org/opengl/wiki/Small_Float_Formats

StructuredBuffer<uint> _LightIndexData_static;
Texture2D<uint2> _TileData_static;

// Unity
inline float3 DirectBRDF_float(PixelData pd, float3 lightDir)
{
    float3 halfDir = SafeNormalize(lightDir + pd.ViewDir);
    float NoH = saturate(dot(pd.Normal, halfDir));
    float LoH = saturate(dot(lightDir, halfDir));

    float d = NoH * NoH * pd.Roughness2MinusOne * 1.00001;
    float LoH2 = LoH * LoH;
    float specularTerm = pd.Roughness2 / ((d * d) * max(0.1, LoH2) * pd.NormalizationTerm);

    float3 color = specularTerm * pd.Specular + pd.Diffuse;
    return color;
}

// Unity
inline float3 LightingPhysicallyBased_float(PixelData pd, float attenuation, float3 lightDir, float3 lightCol)
{
    float NdotL = saturate(dot(pd.Normal, lightDir));
    float3 radiance = lightCol * (attenuation * NdotL);
    return DirectBRDF_float(pd, lightDir) * radiance;
}

// Unity
half3 LightingSpecular(float3 lightColor, float3 lightDir, PixelData pd)
{
    float3 floatVec = SafeNormalize(float3(lightDir) + float3(pd.ViewDir));
    float NdotH = saturate(dot(pd.Normal, floatVec));
    float modifier = pow(NdotH, 0.5);
    float3 specularReflection = pd.Specular.rgb * modifier;
    return lightColor * specularReflection;
}

// Unity
inline float DistanceAttenuation(float distSqr, float2 distAtten) 
{
    float lightAtten = rcp(distSqr);

    float factor = distSqr * distAtten.x;
    float smoothFactor = saturate(1.0 - factor * factor);
    smoothFactor = smoothFactor * smoothFactor;

    // float smoothFactor = saturate(distSqr * distAtten.x + distAtten.y);

    return lightAtten * smoothFactor;
}
 
[numthreads(32,32,1)]
void ComputeLights (
    uint3 id : SV_DispatchThreadID, 
    uint3 groupID: SV_GROUPID, 
    uint3 groupThreadID : SV_GROUPTHREADID)
{    
    uint2 tileIndex = id.xy / BLOCK_SIZE;
    uint lightStart = _TileData_static[tileIndex].x;
    uint lightCount = _TileData_static[tileIndex].y;

    float3 worldPos = _WorldPositionsTexture[id.xy].xyz;

    [branch] if (lightCount == 0)// || !all(worldPos))
    {
        _DeferredLightsTexture[id.xy] = 0;
        return;
    }

    PixelData pd;

    // Set pixel data
    {
        float4 albedo = _AlbedoTexture[id.xy].rgba;
        float alpha = albedo.a;

        float4 depthNormal = _DepthNormalsTexture[id.xy];
        float4 specular = _SpecularTexture[id.xy];

        float depth = DecodeFloatRG(depthNormal.zw);
        float3 normal = DecodeNormal(depthNormal);
        // normal = mul(MATRIX_IV, float4(normal, 0)).xyz;

        float roughness = specular.w;
        float normalizationTerm = roughness * 4.0 + 2.0;
        float roughness2 = roughness * roughness;
        float roughness2MinusOne = roughness2 - 1.0;
        float3 vdir = normalize(_CameraPos - worldPos);

        pd.Diffuse = albedo.rgb * (1.0 - specular.rgb);
        pd.Normal = normal;
        pd.Depth = depth;
        pd.ViewDir = vdir;
        pd.Position = worldPos;
        pd.Specular = specular.rgb;
        pd.Roughness = roughness;
        pd.Roughness2 = roughness2;
        pd.Roughness2MinusOne = roughness2MinusOne;
        pd.NormalizationTerm = normalizationTerm;
    }

    float3 accLight = 0;
    float3 ldir = 0;
    float atten = 0, intensity = 0, dist = 0;
    DFLightData ld = (DFLightData)0;

    [loop] for (uint i = 0; i < lightCount; i++)
    {
        uint lightIndex = _LightIndexData_static[lightStart + i];
        ld = _LightData[lightIndex];
         
        ldir = (ld.Position - worldPos);
        dist = max(dot(ldir, ldir), HALF_MIN);
        ldir = normalize(ldir);
        atten = DistanceAttenuation(dist, ld.Attenuation);

        accLight += LightingPhysicallyBased_float(pd, atten, ldir, ld.Color);
    }

    _DeferredLightsTexture[id.xy] = float4(accLight, 1.0);
} 

[numthreads(32, 32, 1)]
void ComputePixelData(uint3 id : SV_DispatchThreadID)
{
    float4 depthNormal = _DepthNormalsTexture[id.xy];
    float4 specular = _SpecularTexture[id.xy];
    float3 albedo = _AlbedoTexture[id.xy].rgb;

    float depth = DecodeFloatRG(depthNormal.zw);
    float3 normal = DecodeNormal(depthNormal);
    normal = mul(MATRIX_IV, float4(normal, 0)).xyz;

    float3 worldPos = _WorldPositionsTexture[id.xy].xyz;
    float3 vdir = normalize(_CameraPos - worldPos);

    uint validPos = (dot(worldPos, worldPos) != 0);

    float roughness = specular.w;
    float normalizationTerm = roughness * 4.0 + 2.0;
    float roughness2 = roughness * roughness;
    float roughness2MinusOne = roughness2 - 1.0;

    PixelData pd;
    
    pd.Diffuse = albedo;
    pd.Normal = normal;
    pd.Depth = depth;
    pd.ViewDir = vdir;
    pd.Position = worldPos * validPos;
    pd.Specular = specular.rgb;
    pd.Roughness = roughness;
    pd.Roughness2 = roughness2;
    pd.Roughness2MinusOne = roughness2MinusOne;
    pd.NormalizationTerm = normalizationTerm;

    _PixelData[TextureSpaceToArray(id.xy)] = pd;
}